{"version":3,"sources":["header/Search.js","header/Mode.js","header/logo.png","header/logo_dark.png","header/Header.js","card/CardAPIResults.js","api_results_list/APIResults.js","card/CardNominated.js","nominates_list/Nominations.js","footer/Footer.js","GlobalStyles.js","Themes.js","App.js","reportWebVitals.js","index.js"],"names":["Search","queryCallback","className","type","placeholder","onChange","event","target","value","Mode","themeCallback","useState","theme","localStorage","getItem","getThemeFromStorage","isLightToggled","setLightToggle","for","id","checked","onClick","Header","props","src","logo","logo_dark","alt","height","CardAPIResults","isNominatedCallback","addNominationCallback","movie","nominated","setNominatedState","Poster","Title","Year","result","addNomination","disabled","imdbID","APIResults","movies","queryText","length","map","CardNominated","removeNominationCallback","Nominations","nominations","nomineeList","setNomineeList","useEffect","isSuccess","setSuccess","Footer","style","borderTop","GlobalStyles","createGlobalStyle","body","text","lightTheme","toggleBorder","background","darkTheme","App","isNominated","nominatedMovies","forEach","nominatedMovie","JSON","parse","setNominatedMovies","setLength","setMovies","query","setQuery","fetch","then","response","json","Response","setTheme","setItem","newState","push","stringify","filter","item","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e8918b1d.chunk.js","sourcesContent":["// Imports\nimport React from 'react';\n\n// Style Imports\nimport \"./Search.css\"\n\nfunction Search({ queryCallback }) {\n    return(\n        <input\n            className=\"Search-bar\"\n            type=\"text\" \n            placeholder=\"Search movie titles...\"\n            onChange={event => queryCallback(event.target.value)}/>\n    );\n}\n\nexport default Search;","// Imports\nimport React, { useState } from 'react';\n\n// Style Imports\nimport './Mode.css';\n\nfunction Mode({ themeCallback }) {\n\n    const getThemeFromStorage = () => {\n        var theme = localStorage.getItem('theme');\n\n        // Null check, for the first time someone lands on the page.\n        return (theme === null || theme === 'light') ? true : false;\n    }\n    \n    // Hook for toggling between light/dark theme, light being default.\n    const [isLightToggled, setLightToggle] = useState(getThemeFromStorage());\n    const toggleMode = () => {\n        setLightToggle(!isLightToggled);\n        themeCallback();\n    }\n\n    return (\n        <div className=\"container\">\n            <label className=\"switch\" for=\"checkbox\">\n            <input \n                type=\"checkbox\" \n                id=\"checkbox\"\n                checked={!isLightToggled}\n                onClick={toggleMode}/>\n            <div className=\"slider round\"></div>\n            </label>\n            <p>Switch to {isLightToggled ? \"Dark Mode\" : \"Light Mode\"}</p>\n        </div>\n    );\n}\n\nexport default Mode;","export default __webpack_public_path__ + \"static/media/logo.db6068a2.png\";","export default __webpack_public_path__ + \"static/media/logo_dark.7529fced.png\";","// Imports\nimport React from 'react';\nimport Search from './Search';\nimport Mode from './Mode';\nimport logo from './logo.png';\nimport logo_dark from './logo_dark.png';\n\nfunction Header(props) {\n    const { theme, queryCallback, themeCallback } = props;\n\n    return (\n        <header className=\"Header-container\">\n            <img \n                src={theme === 'light' ? logo : logo_dark} \n                alt=\"The Shoppies\" \n                height=\"70\"/>\n            <Search queryCallback={queryCallback}/>\n            <Mode themeCallback={themeCallback}/>\n        </header>\n    )\n}\n\nexport default Header;","// Imports\nimport React, {useState} from 'react';\n\n// Style Imports\nimport './Card.css';\n\nfunction CardAPIResults({ isNominatedCallback, addNominationCallback, movie }) {\n\n    // Hook for representing a movie card that is nominated and updating app state of said nominated movie if need be.\n    const [nominated, setNominatedState] = useState(isNominatedCallback(movie));\n    const addNomination = (movie) => {\n        var result = addNominationCallback(movie);\n        setNominatedState(result);\n    }\n\n    return (\n        <div className=\"Card-container\" key={movie.imdbID}>\n            <img src={movie.Poster === 'N/A' ? 'https://placehold.it/198x264&text=Image+Not+Found' : movie.Poster} \n                alt={movie.Title}/>\n            <div className=\"Card-content\">\n                <h2>{movie.Title}</h2>\n                <p>{movie.Year}</p>\n                <button \n                    className=\"Button-green\"\n                    onClick={() => {addNomination(movie)}}\n                    disabled={nominated}>Nominate</button>\n            </div>\n        </div>\n    )\n}\n\nexport default CardAPIResults;","// Imports\nimport React from 'react';\nimport CardAPIResults from '../card/CardAPIResults';\n\n// Style Imports\nimport './APIResults.css';\n\nfunction APIResults({ movies, queryText, isNominatedCallback, addNominationCallback }) {\n    return (\n        <div className=\"Left-column-container\">\n            <h2>Movie Results For: \"{queryText}\"</h2> \n            <ul className=\"Results-container\">\n                {movies !== null \n                    && movies.length > 0 \n                    && movies.map(movie => \n                        <CardAPIResults \n                            movie={movie}\n                            addNominationCallback={addNominationCallback}\n                            isNominatedCallback={isNominatedCallback}/>\n                    )}\n            </ul>\n        </div>\n    )\n}\n\nexport default APIResults;\n","// Imports\nimport React from 'react';\nimport './Card.css';\n\nfunction CardNominated(props) {\n    return (\n        <div className=\"Card-container\" key={props.movie.imdbID}>\n            <img src={props.movie.Poster === 'N/A' ? 'https://placehold.it/198x264&text=Image+Not+Found' : props.movie.Poster} alt={props.movie.Title}/>\n            <div className=\"Card-content\">\n                <h2 className=\"Nominated-title\">{props.movie.Title}</h2>\n                <p>{props.movie.Year}</p>\n                <button className=\"Button-red\" onClick={() => {props.removeNominationCallback(props.movie)}}>Remove</button>\n            </div>\n        </div>\n    )\n}\n\nexport default CardNominated;","// Imports\nimport React, { useEffect, useState } from 'react';\nimport CardNominated from '../card/CardNominated';\n\n// Style Imports\nimport './Nominations.css';\n\nfunction Nominations({ nominations, length, removeNominationCallback }) {\n\n    // Hook for keeping track of how many nominations the user has\n    const [nomineeList, setNomineeList] = useState(nominations);\n    useEffect(() => {\n        setNomineeList(null);\n        var nominees = nominations;\n        setNomineeList(nominees);\n    }, [nominations])\n\n    // Hook to check user has successfully nominated 5 movies.\n    const [isSuccess, setSuccess] = useState(false);\n    useEffect(() => {\n        setSuccess(length === 5);\n    }, [length]);\n\n    return (\n        <div className=\"Right-column-container\">\n            {isSuccess && <p className=\"Success-banner\">You have successfully chosen 5 movies!</p>}\n            <h2>Your Nominations ({length}/5 chosen):</h2>\n            <ul className=\"Nominations-container\">\n                {nomineeList !== null && nomineeList.length > 0 && nomineeList.map(movie => <CardNominated key={movie.imdbID} movie={movie} removeNominationCallback={removeNominationCallback}/>)}\n            </ul>\n        </div>\n    )\n}\n\nexport default Nominations;","// Imports\nimport React from 'react';\n\nfunction Footer() {\n    return (\n        <footer style={{borderTop: '1px solid lightgrey'}}>\n            <p>Made with ❤️ using React!</p>\n        </footer>\n    )\n}\n\nexport default Footer;","// Imports\nimport { createGlobalStyle } from \"styled-components\";\n\n// These are the inherited values for light/dark theme.\nexport const GlobalStyles = createGlobalStyle`\n  body {\n    background: ${({ theme }) => theme.body};\n    color: ${({ theme }) => theme.text};\n    transition: all 0.50s linear;\n  }\n  .Card-container {\n    background-color: ${({theme}) => theme.body};\n    transition: all 0.50s linear;\n  }\n  .Card-container h2 {\n    color: ${({ theme }) => theme.text};\n  }\n  `\n","export const lightTheme = {\n    body: '#FFF',\n    text: '#363537',\n    toggleBorder: '#FFF',\n    background: '#363537',\n}\nexport const darkTheme = {\n    body: '#363537',\n    text: '#FAFAFA',\n    toggleBorder: '#6B8096',\n    background: '#999',\n}","// Imports\nimport React, { useEffect, useState } from 'react';\nimport Header from './header/Header';\nimport APIResults from './api_results_list/APIResults';\nimport Nominations from './nominates_list/Nominations';\nimport Footer from './footer/Footer';\n\n// Style Imports\nimport { ThemeProvider } from \"styled-components\";\nimport { GlobalStyles } from \"./GlobalStyles\";\nimport { lightTheme, darkTheme } from \"./Themes\";\nimport './App.css';\n\n// Constants\nconst API_KEY = \"9226a185\";\nconst MAX_NOMINATIONS = 5;\n\nfunction App() {\n\n    /**\n     * Adds a movie to the nominated array and updates the localStorage.\n     * @param {any} movie \n     */\n    const addNomination = (movie) => {\n        if (nominatedMovies.length < MAX_NOMINATIONS && !isNominated(movie)) {\n            var newState = nominatedMovies;\n            newState.push(movie);\n            localStorage.setItem('nominatedMovies', JSON.stringify(newState));\n            setNominatedMovies(newState);\n            setLength(newState.length);\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Gets the length of the nominatedMovies array.\n     */\n    const getLength = () => { \n        return (nominatedMovies !== null) ? nominatedMovies.length : 0;\n    }\n\n    /**\n     * Gets the nominatedMovies array from localStorage.\n     */\n    const getNominations = () => {\n        return (localStorage.getItem('nominatedMovies') === null) ? [] : JSON.parse(localStorage.getItem('nominatedMovies'));\n    }\n\n    /**\n     * Checks if the movie is a nominated movie.\n     * @param {any} movie \n     */\n    const isNominated = (movie) => {\n        var result = false;\n        if (nominatedMovies === null) {\n            return result;\n        }\n\n        nominatedMovies.forEach(nominatedMovie => {\n            if (movie.imdbID === nominatedMovie.imdbID) {\n                result = true;\n                return result;\n            }\n        });\n        return result;\n    }\n\n    /**\n     * Removes a movie from the nominated array and updates the localStorage.\n     * @param {any} movie \n     */\n    const removeNomination = (movie) => {\n        var newState = nominatedMovies;\n        newState = newState.filter(item => item.imdbID !== movie.imdbID);\n        localStorage.setItem('nominatedMovies', JSON.stringify(newState));\n        setNominatedMovies(newState);\n        setLength(newState.length);\n    }\n\n    // Hooks for nominated movies array\n    const [nominatedMovies, setNominatedMovies] = useState(getNominations());\n\n    // Hooks for length of nominated movies array\n    const [length, setLength] = useState(getLength())\n\n    // Hooks for movies from the API results\n    const [movies, setMovies] = useState(null);\n    const [query, setQuery] = useState('');\n    useEffect(() => {\n        setMovies(null);\n\n        fetch(`https://www.omdbapi.com/?s=${query}&apikey=${API_KEY}&type=movie`)\n            .then(response => response)\n            .then(response => response.json())\n            .then(response => {\n                if (response.Response !== 'False') {\n                    setMovies(response.Search);\n                }\n            })\n\n    }, [query, nominatedMovies]);\n\n    // Hooks for toggling between light and dark theme\n    const [theme, setTheme] = useState(localStorage.getItem('theme') || 'light');\n    const themeToggler = () => {\n      if (theme === 'light') {\n          setTheme('dark');\n          localStorage.setItem('theme', 'dark'); \n      } else {\n          setTheme('light');\n          localStorage.setItem('theme', 'light');\n      }\n    }\n\n    return (\n        <ThemeProvider theme={theme === 'light' ? lightTheme : darkTheme}>\n            <GlobalStyles/>\n            <div className=\"App\">\n                <Header \n                    className=\"Header-container\"\n                    theme={theme} \n                    queryCallback={setQuery} \n                    themeCallback={themeToggler}/>\n                <div className=\"Column-container\">\n                    <APIResults \n                        movies={movies}\n                        queryText={query}\n                        addNominationCallback={addNomination}\n                        isNominatedCallback={isNominated}/>\n                    <Nominations \n                        length={length}\n                        isNominatedCallback={isNominated}\n                        nominations={nominatedMovies}\n                        removeNominationCallback={removeNomination}/>\n                </div>\n                <Footer/>\n            </div>\n        </ThemeProvider>\n    );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}